type: edu
files:
- name: src/cryptography/Main.kt
  visible: true
  text: |-
    package cryptography

    //import java.awt.Color
    //import java.awt.Transparency
    import java.awt.image.BufferedImage
    import java.io.File
    import javax.imageio.ImageIO

    class ImgFileException( s: String? ): Exception(s)

    fun main() {
        while (true) {
            println("Task (hide, show, exit):")
            try {
                when (val inp = readln()) {
                    "show" -> show()
                    "hide" -> hide()
                    "exit" -> break
                    else -> println("Wrong task: $inp")
                }
            } catch (e: ImgFileException) {
                println(e.message)
            }
        }
        println("Bye!")
    }

    fun show() {
        println("Input image file:")
        val inpFileName = readln()

        val file = File(inpFileName)
        val im = getImage(file)

        val hidden = HiddenMessage()
        var isFinished = false
        for (y in 0 until im.height) {
            for (x in 0 until im.width) {
                val color = im.getRGB(x, y)
                isFinished = hidden.addBit(color and 1)
                if (isFinished) break
            }
            if (isFinished) break
        }

        println("Message:")
        println(hidden.getMessage())
    }


    fun hide () {
        println("Input image file:")
        val inpFileName = readln()
        println("Output image file:")
        val outputFileName = readln()

        println("Message to hide:")
        val hidden = HiddenMessage(readln())

        val file = File(inpFileName)
        val im = getImage(file) // Image

        if ( (im.width * im.height) < hidden.getSize() )
            throw ImgFileException("The input image is not large enough to hold this message.")

        val resImg = BufferedImage(im.width,im.height,im.type)

        var bitNum = 0
        for (y in 0 until im.height) {
            for (x in 0 until im.width) {
                val color = im.getRGB(x, y)
                val resColor = if (bitNum < hidden.getSize())
                    (color shr 1 shl 1) + hidden.getBit(bitNum)
                else color
                resImg.setRGB(x, y, resColor)
                bitNum++
            }
        }

        try {
            val outFile = File(outputFileName)
            ImageIO.write(resImg,"png", outFile)
        } catch (e: Exception) {
            throw ImgFileException(e.message)
        }
        println("Message saved in $outputFileName image.")
    }

    fun getImage( file: File ): BufferedImage {
        val im: BufferedImage // Image

        try {
            im = ImageIO.read(file)
        } catch (e: Exception) {
            throw ImgFileException(e.message)
        }

        if (im.colorModel.numComponents != 3)
            throw ImgFileException("The number of color components isn't 3.")
        if (im.colorModel.pixelSize != 24)
            throw ImgFileException("The input file isn't 24-bit.")

        return im
    }

    class HiddenMessage() {

        private var array = byteArrayOf() // array of bytes - hidden message
        private var size = 0 // current length of message in bits

        constructor(str: String): this() {
            this.array = str.toByteArray(Charsets.UTF_8) + 0 + 0 + 3
            this.size = this.array.size * 8
        }

        fun getSize(): Int = this.size

        fun getMessage(): String {
            return this.array.toString(Charsets.UTF_8).substring(0..array.lastIndex-3)
        }

        // get bit number n from the message
        fun getBit(n: Int): Int {
            if ( n < 0 || n >= this.size )
                throw ImgFileException("Wrong bit number.")

            val byte: Int = this.array[n/8].toInt()
            val shift = 7 - (n % 8)
            return ((byte shr shift) and 1)
        }

        // add a bit to the end of the message
        // returns true if 0-0-3 bytes sequence found
        fun addBit(b: Int): Boolean {
            if (b < 0 || b > 1) throw ImgFileException("Wrong bit.")
            if (this.size % 8 == 0) {
                this.array += 0
            }
            this.array[this.array.lastIndex] =
                ((this.array.last().toInt() shl 1) or
                        b).toByte()
            this.size++
            if (this.size % 8 == 0 && this.size >= 24) {
                if (this.array[this.array.lastIndex] == 3.toByte() &&
                    this.array[this.array.lastIndex-1] == 0.toByte() &&
                    this.array[this.array.lastIndex-2] == 0.toByte())
                    return true
            }
            return false
        }
    }
  learner_created: false
- name: test/small.png
  visible: false
  learner_created: false
- name: test/SteganographyTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.awt.Color
    import java.awt.image.BufferedImage
    import java.io.File
    import java.security.MessageDigest
    import javax.imageio.ImageIO

    class SteganographyTest: StageTest<Any>() {
        @DynamicTest
        fun imageCreateTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().toLowerCase().trim()
            if (!outputString.contains("task (hide, show, exit):")) {
                return CheckResult(false, "Prompt \"Task (hide, show, exit):\" is missing.")
            }

            outputString = main.execute("hide").toLowerCase().trim()
            if (!outputString.contains("input image file:")) {
                return CheckResult(false, "Wrong output after the \"hide\" command.")
            }

            try {
                val infile = "test/testimage.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "Input test image file doesn't exist. Try reloading the project.")
                }
                val inputImage: BufferedImage = ImageIO.read(inputFile)
                if (imageHash(inputImage) != "cc5bc38fad61e51b44ec7731f49ae2e290c06f55") {
                    return CheckResult(false, "Input test image file is corrupted. Try reloading the project.")
                }

                outputString = main.execute(infile).toLowerCase().trim()
                if (!outputString.contains("output image file:")) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }

                val outfile = "test/out.png"
                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("message to hide:")) {
                    return CheckResult(false, "Wrong output after inserting the output filename.")
                }

                val message = "Hyperskill steganography program."
                outputString = main.execute(message).toLowerCase().trim()
                if (!outputString.contains("password:")) {
                    return CheckResult(false, "Wrong output after inserting the message.")
                }

                val password = "mypassword"
                outputString = main.execute("mypassword").toLowerCase().trim()
                if ( ( !outputString.contains("message saved")
                    && outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "Wrong output after inserting the password.")
                }

                val outputFile = File(outfile)
                if (!outputFile.exists()) {
                    return CheckResult(false, "Image file $outfile hasn't been created.")
                }
                val outputImage: BufferedImage = ImageIO.read(outputFile)
                if (imageHash(outputImage) != "cbe82b64ab5f3641afc22e8c9b688902506b3444") {
                    return CheckResult(false, "Wrong output file. Wrong output image hash.")
                }

                outputString = main.execute("show").toLowerCase().trim()
                if (!outputString.contains("input image file:")) {
                    return CheckResult(false, "Wrong output after the \"show\" command.")
                }

                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("password:")) {
                    return CheckResult(false, "Wrong output after inserting the message.")
                }

                outputString = main.execute(password).toLowerCase().trim()
                if (!( outputString.contains("message:") && outputString.contains(message.toLowerCase()) &&
                            outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }
            } catch (e: Exception) {
                return CheckResult(false, e.message)
            }

            outputString = main.execute("exit").toLowerCase().trim()
            if (!outputString.contains("bye!")) {
                return CheckResult(false, "Wrong output after the \"exit\" command.")
            }

            if (!main.isFinished) {
                return CheckResult(false, "Program has not terminated after the \"exit\" command.")
            }

            return CheckResult(true, "")
        }

        @DynamicTest
        fun smallImageTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().toLowerCase().trim()
            if (!outputString.contains("task (hide, show, exit):")) {
                return CheckResult(false, "Prompt \"Task (hide, show, exit):\" is missing.")
            }

            outputString = main.execute("hide").toLowerCase().trim()
            if (!outputString.contains("input image file:")) {
                return CheckResult(false, "Wrong output after the \"hide\" command.")
            }

            try {
                val infile = "test/small.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "Input test image file doesn't exist. Try reloading the project.")
                }
                val inputImage: BufferedImage = ImageIO.read(inputFile)
                if (imageHash(inputImage) != "c4679ca63e03c377de73ab3aaede91f37a0d50b6") {
                    return CheckResult(false, "Input test image file is corrupted. Try reloading the project.")
                }

                outputString = main.execute(infile).toLowerCase().trim()
                if (!outputString.contains("output image file:")) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }

                val outfile = "test/out2.png"
                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("message to hide:")) {
                    return CheckResult(false, "Wrong output after inserting the output filename.")
                }

                val message = "Hyperskill steganography program."
                outputString = main.execute(message).toLowerCase().trim()
                if (!outputString.contains("password:")) {
                    return CheckResult(false, "Wrong output after inserting the message.")
                }

                val password = "mypassword"
                outputString = main.execute(password).toLowerCase().trim()
                if ( !( outputString.contains("the input image is not large enough to hold this message") && outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "The program should check that the image size is adequate for holding the Bytes array.")
                }

            } catch (e: Exception) {
                return CheckResult(false, e.message)
            }

            outputString = main.execute("exit").toLowerCase().trim()
            if (!outputString.contains("bye!")) {
                return CheckResult(false, "Wrong output after the \"exit\" command.")
            }

            if (!main.isFinished) {
                return CheckResult(false, "Program has not terminated after the \"exit\" command.")
            }

            return CheckResult(true, "")
        }

        private fun imageHash(inputImage: BufferedImage) : String {
            val imageByteArray = ByteArray(3 * inputImage.width * inputImage.height)
            var index = 0
            for (y in 0 until inputImage.height) {
                for (x in 0 until inputImage.width) {
                    val color = Color(inputImage.getRGB(x, y))
                    imageByteArray[index] = color.red.toByte()
                    index++
                    imageByteArray[index] = color.green.toByte()
                    index++
                    imageByteArray[index] = color.blue.toByte()
                    index++
                }
            }
            val md = MessageDigest.getInstance("SHA-1")
            md.update(imageByteArray)
            return md.digest().joinToString("") { "%02x".format(it) }
        }

    }

  learner_created: false
- name: test/testimage.png
  visible: false
  learner_created: false
feedback_link: https://hyperskill.org/projects/160/stages/833/implement#comment
status: Solved
record: -1
